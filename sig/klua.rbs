# TypeProf 0.12.0

# Classes
module Klua
  VERSION: String

  type token_type = :identifier | :number | :literal_str | 
                   :local | :if | :then | :else | :end | 
                   :and | :or | :not | 
                   :+ | :- | :* | :/ | :< | :> | :== | :noteq | 
                   :assign | :comma | :semicolon | :lbrace | :rbrace | 
                   :dummy

  class Token
    def initialize: (token_type type_, String value) -> untyped
    attr_reader type: token_type
    attr_reader value: String
  end

  type node_type = :block | :stat | :varstat | :assignstat | :funcallstat | :ifstat |
                  :var | :exp | :prefixexp | :unary | :binary | 
                  :functioncall | :args | :binop | :unop | 
                  :dummy | :root

  class Node
    def initialize: (node_type type_, Array[Node] nodes, Token? term) -> untyped
    attr_reader type: node_type
    attr_reader nodes: Array[Node]
    attr_reader term: Token?
  end

  class Root < Node
    @type: node_type
    @nodes: Array[Node]
    @term: Token?

    def initialize: (Node root) -> untyped
    attr_reader root: Node
  end

  class Scanner
    def initialize: -> untyped
    def scan: (String source) -> [Token]
  end

  class Parser
    def initialize: -> untyped
    def parse: ([Token] tokens) -> Root
  end
end
