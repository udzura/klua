# TypeProf 0.12.0

# Classes
module Klua
  VERSION: String

  type token_type = :identifier | :number | :literal_str |
                    :local | :if | :then | :else | :end |
                    :and | :or | :not |
                    :+ | :- | :* | :/ | :< | :> | :== | :noteq |
                    :assign | :comma | :semicolon | :lbrace | :rbrace |
                    :eof |
                    :dummy

  class Token
    def initialize: (token_type type_, String value) -> untyped
    attr_reader type: token_type
    attr_reader value: String
  end

  type node_type = :block | :stat | :varstat | :assignstat | :funcallstat | :ifstat |
                   :var | :exp | :prefixexp | :unary | :binary |
                   :functioncall | :args | :binop | :unop |
                   :dummy | :root

  class Node
    def initialize: (node_type type_, Array[Node] nodes, Token? term) -> untyped
    attr_reader type: node_type
    attr_reader nodes: Array[Node]
    attr_reader term: Token?
  end

  class Root < Node
    @type: node_type
    @nodes: Array[Node]
    @term: Token?

    def initialize: (Node root) -> untyped
    attr_reader root: Node
  end

  class Scanner
    @source: Array[Integer]
    @start: Integer
    @current: Integer
    @tokens: Array[Token]

    def initialize: -> untyped
    def scan: (String source) -> Array[Token]

    private
    def scan_token: -> untyped
    def add_token: (token_type type_) -> untyped
    def as_string: -> untyped
    def as_number: -> untyped
    def as_identifier: -> untyped
    def get_reserved_sym: (String lit) -> token_type?

    def succ: -> Integer
    def match: (Integer expected) -> bool
    def peek: -> Integer
    def peek_next: -> Integer
    def digit?: (Integer char) -> bool
    def alpha?: (Integer char) -> bool
    def alphanumeric?: (Integer char) -> bool
    def at_end?: -> bool
  end

  class Parser
    def initialize: -> untyped
    def parse: ([Token] tokens) -> Root
  end
end
